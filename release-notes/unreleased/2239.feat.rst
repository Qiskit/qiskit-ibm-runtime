The following changes were made to support the upcoming 
`IBM Quantum platform migration <https://docs.quantum.ibm.com/migration-guides/classic-iqp-to-cloud-iqp>`__:

    - When initializing the service, there is a new channel type, ``ibm_quantum_platform``, which replaces ``ibm_cloud``. 
      ``ibm_quantum_platform`` and ``ibm_cloud`` point to the same channel but  
      ``ibm_cloud`` will be deprecated and removed in future releases. 

    - When saving and initializing an account on the new platform, an instance is no longer required. If an instance
    is not passed in, all instances will be checked when a backend is retrieved, (``service.backend()``). 
    There are new parameters ``account_id``, ``region``, and ``plans_preference``, that can be used to set prioritize certain instances. 
  
      - ``account_id``: If your IBM cloud token has access to multiple accounts, specify an account with its account_id (found in IBM Cloud account settings). 
      Defaults to the first account available.
      - ``region``: Set a region preference. ``us-east`` or ``eu-de``.
      - ``plans_preference``: A list of account types, ordered by preference. An instance with the first value in the list will be prioritized

    For example, if ``region`` is saved as ``us-east``, only instances from ``us-east`` will be checked. If ``plans_preference`` is set, 
    the instances will be prioritized in the order given so ``['Open', 'Premium']`` would prioritize all open plan instances, then all
    premium plan instances, and then the rest.

    - If an instance is passed into ``save_account()``, or passed in during initialization (``QiskitRuntimeService()``), 
    it will be used as the default instance when retrieving backends. The instance passed in at initialization will take 
    precendence over the one saved in the account. The instance can also be passed in explicity when 
    retrieving backends (``backend()`` or ``backends()``).

      .. code-block:: python

        # save account
        service = QiskitRuntimeService.save_account(
          # No channel needs to be specified, ibm_quantum_platform is the default
          token=token,
          account_id="...", # Optional
          region="us-east|eu-de", # Optional
          plans_preference=['Open',...], #Optional
          set_as_default=True  #Optional
          ) 
    
        # initialize account
        service = QiskitRuntimeService() # defaults to ibm_quantum_platform account
        service.backend(name="...") # picks instance based on saved preferences 
        service.backend(name="...", instance="...") # can also explicity pass in an instance to use

        # initialize account with instance
        service = QiskitRuntimeService(instance = "...") # sets instance as default instance
        service.backend(name="...") # only checks default instance, fails if the backend not in the instance
        service.backend(name="...", instance="...") # can still explicity pass in a different instance

        # OR

        # save account with instance 
        service = QiskitRuntimeService.save_account(
          # No channel needs to be specified, ibm_quantum_platform is the default
          token=token,
          instance="..." # This will be the default instance 
          account_id="...", # Optional
          region="us-east|eu-de", # Optional
          plans_preference=['Open',...], #Optional
          set_as_default=True  #Optional
          ) 

        # initialize account
        service = QiskitRuntimeService() # defaults to ibm_quantum_platform account
        service.backend(name="...") # only checks saved default instance from save_account
        service.backend(name="...", instance="...") # can also explicity pass in an instance which takes precendence

        # initializing account with instance works the same way 
        service = QiskitRuntimeService(instance = "...") # sets instance as default instance, overrides instance from save_account
        service.backend(name="...") # only checks default instance, fails if the backend not in the instance
        service.backend(name="...", instance="...") # can still explicity pass in a different instance

    - It is possible to view all instances on the new platform with :meth:`~.QiskitRuntimeService.instances`


