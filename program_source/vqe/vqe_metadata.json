{
  "name": "vqe",
  "description": "Variational Quantum Eigensolver (VQE) to find the minimal eigenvalue of a Hamiltonian.",
  "max_execution_time": 18000,
  "version": "1.1",
  "parameters": [                         
    {"name": "ansatz", "description": "A parameterized quantum circuit preparing the ansatz wavefunction for the VQE. It is assumed that all qubits are initially in the 0 state.", "type": "QuantumCircuit", "required": true},
    {"name": "operator", "description": "The Hamiltonian whose smallest eigenvalue we're trying to find.", "type": "PauliSumOp", "required": true},
    {"name": "optimizer", "description": "The classical optimizer used in to update the parameters in each iteration. Can be either any of Qiskit's optimizer classes. If a dictionary, only SPSA and QN-SPSA are supported and the dictionary must specify the name and options of the optimizer, e.g. ``{'name': 'SPSA', 'maxiter': 100}``.", "type": "Union[Optimizer, dict]", "required": true},
    {"name": "initial_parameters", "description": "Initial parameters of the ansatz. Can be an array or the string ``'random'`` to choose random initial parameters.", "type": "Union[numpy.ndarray, str]", "required": true},
    {"name": "aux_operators", "description": "A list of operators to be evaluated at the final, optimized state.", "type": "List[PauliSumOp]", "required": false},
    {"name": "shots", "description": "The number of shots used for each circuit evaluation. Defaults to 1024.", "type": "int", "required": false},
    {"name": "measurement_error_mitigation", "description": "Whether to apply measurement error mitigation in form of a complete measurement fitter to the measurements. Defaults to False.", "type": "bool", "required": false},
    {"name": "initial_layout", "description": "Initial position of virtual qubits on the physical qubits of the quantum device. Default is None.", "type": "list or dict", "required": false}
  ],
  "return_values": [
    {"name": "optimizer_evals", "description": "The number of steps of the optimizer.", "type": "int"},
    {"name": "optimizer_time", "description": "The total time taken by the optimizer.", "type": "float"},
    {"name": "optimal_value", "description": "The smallest value found during the optimization. Equal to the ``eigenvalue`` attribute.", "type": "float"},
    {"name": "optimal_point", "description": "The optimal parameter values found during the optimization.", "type": "np.ndarray"}, 
    {"name": "optimal_parameters", "description": "Not supported at the moment, therefore ``None``.", "type": "NoneType"},
    {"name": "cost_function_evals", "description": "The number of cost function (energy) evaluations", "type": "int"},
    {"name": "eigenstate", "description": "The square root of sampling probabilities for each computational basis state of the circuit with optimal parameters.", "type": "dict"},
    {"name": "eigenvalue", "description": "The estimated eigenvalue.", "type": "complex"},
    {"name": "aux_operator_eigenvalues", "description": "The expectation values of the auxiliary operators at the optimal state.", "type": "np.ndarray"},
    {"name": "optimizer_history", "description": "A dictionary containing information about the optimization process: the value objective function, parameters, and a timestamp.", "type": "dict"}
  ]
}
