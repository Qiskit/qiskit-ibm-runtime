# This code is part of Qiskit.
#
# (C) Copyright IBM 2024.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""
==================================================================================
NoiseLearner result classes (:mod:`qiskit_ibm_runtime.utils.noise_learner_result`)
==================================================================================

.. autosummary::
   :toctree: ../stubs/

   PauliLindbladError
   LayerError
"""

from __future__ import annotations

from typing import Any, Dict, Iterator, Optional, Sequence, Tuple
from numpy.typing import NDArray
import numpy as np

from qiskit.circuit import QuantumCircuit
from qiskit.quantum_info import PauliList

import plotly.graph_objects as go
from plotly.colors import sample_colorscale
from qiskit.providers.backend import BackendV2

from ..utils.deprecation import issue_deprecation_msg
from .visualization_utils import get_qubits_coordinates, get_rgb_color, pie_slice


class PauliLindbladError:
    r"""A Pauli error channel generated by a Pauli Lindblad dissipators.

    This operator represents an N-qubit quantum error channel
    :math:`E(\rho) = e^{\sum_j r_j D_{P_j}}(\rho)` generated by Pauli Lindblad dissipators
    :math:`D_P(\rho) = P \rho P - \rho`, where :math:`P_j` are N-qubit :class:`~.Pauli`
    operators.

    The list of Pauli generator terms are stored as a :class:`~.PauliList` and can be
    accessed via the :attr:`~generators` attribute. The array of dissipator rates
    :math:`r_j` can be accessed via the :attr:`~rates` attribute.

    The equivalent Pauli error channel can be constructed as a composition
    of single-Pauli channel terms

    .. math::

        E = e^{\sum_j r_j D_{P_j}} = \prod_j e^{r_j D_{P_j}}
        = prod_j \left( (1 - p_j) S_I + p_j S_{P_j} \right)

    where :math:`p_j = \frac12 - \frac12 e^{-2 r_j}` [1].

    Args:
        generators: A list of the Pauli Lindblad generators for the error channel.
        rates: A list of the rates for the Pauli-Lindblad ``generators``.

    Raises:
        ValueError: If ``generators`` and ``rates`` have different lengths.

    References:
        1. E. van den Berg, Z. Minev, A. Kandala, K. Temme, *Probabilistic error
           cancellation with sparse Pauli–Lindblad models on noisy quantum processors*,
           Nature Physics volume 19, pages1116–1121 (2023).
           `arXiv:2201.09866 [quant-ph] <https://arxiv.org/abs/2201.09866>`_
    """

    def __init__(self, generators: PauliList, rates: Sequence[float]) -> None:
        self._generators = generators
        self._rates = np.asarray(rates, dtype=float)

        if (len(generators),) != self._rates.shape:
            raise ValueError(
                f"``generators`` has length {len(generators)} "
                f"but ``rates`` has shape {self._rates.shape}."
            )

    @property
    def generators(self) -> PauliList:
        r"""
        The Pauli Lindblad generators of this :class:`~.PauliLindbladError`.
        """
        return self._generators

    @property
    def rates(self) -> NDArray[np.float64]:
        r"""
        The Lindblad generator rates of this quantum error.
        """
        return self._rates

    @property
    def num_qubits(self) -> int:
        r"""
        The number of qubits in this :class:`~.PauliLindbladError`.
        """
        return self.generators.num_qubits

    def n_body(self, n: int) -> PauliLindbladError:
        r"""
        The :class:`~.PauliLindbladError` obtained by removing all the dissipators in this error
        that do not act on exactly ``n`` qubits.
        """
        if n < 0:
            raise ValueError("``n`` must be ``0`` or larger.")
        mask = np.sum(self.generators.x | self.generators.z, axis=1) == n
        return PauliLindbladError(self.generators[mask], self.rates[mask])

    def _json(self) -> dict:
        """Return a dictionary containing all the information to re-initialize this object."""
        return {"generators": self.generators, "rates": self.rates}

    def __repr__(self) -> str:
        return f"PauliLindbladError(generators={self.generators}, rates={self.rates.tolist()})"


class LayerError:
    """The error channel (in Pauli-Lindblad format) of a single layer of instructions.

    Args:
        circuit: A circuit whose noise has been learnt.
        qubits: The labels of the qubits in the ``circuit``.
        error: The Pauli Lindblad error channel affecting the ``circuit``.

    Raises:
        ValueError: If ``circuit``, ``qubits``, and ``error`` have mismatching number of qubits.
    """

    def __init__(
        self, circuit: QuantumCircuit, qubits: Sequence[int], error: PauliLindbladError
    ) -> None:
        self._circuit = circuit
        self._qubits = list(qubits)
        self._error = error

        if len({self.circuit.num_qubits, len(self.qubits), self.error.num_qubits}) != 1:
            raise ValueError("Mistmatching numbers of qubits.")

    @property
    def circuit(self) -> QuantumCircuit:
        r"""
        The circuit in this :class:`.~LayerError`.
        """
        return self._circuit

    @property
    def qubits(self) -> list[int]:
        r"""
        The qubits in this :class:`.~LayerError`.
        """
        return self._qubits

    @property
    def error(self) -> PauliLindbladError:
        r"""
        The error channel in this :class:`.~LayerError`.
        """
        return self._error

    @property
    def generators(self) -> PauliList:
        r"""
        (DEPRECATED) The Pauli Lindblad generators of the error channel in this :class:`.~LayerError`.
        """
        issue_deprecation_msg(
            "The ``generators`` property is deprecated",
            "0.27.0",
            "Instead, you can access the generators through the ``error`` property.",
            1,
        )
        return self.error.generators

    @property
    def rates(self) -> NDArray[np.float64]:
        r"""
        (DEPRECATED) The Lindblad generator rates of the error channel in this :class:`.~LayerError`.
        """
        issue_deprecation_msg(
            "The ``rates`` property is deprecated",
            "0.27.0",
            "Instead, you can access the rates through the ``error`` property.",
            1,
        )
        return self.error.rates

    @property
    def num_qubits(self) -> int:
        r"""
        The number of qubits in this :class:`~.LayerError`.
        """
        return len(self.qubits)
    
    def draw_map(
        self,
        backend: BackendV2,
        coordinates: Optional[list[list[int]]] = None,
        *,
        colorscale: str = "Bluered",
        color_no_data: str = "lightgray",
        edges_n_segs: int = 16,
        edges_width: float = 4,
        height: int = 500,
        plot_bgcolor: str = "white",
        radius: float = 0.25,
        width: int = 800,
    ) -> go.Figure:
        r"""
        Draws a map view of a this layer error.

        Args:
            backend: The backend on top of which the layer error is drawn.
            coordinates: A list of coordinates in the form ``(row, column)`` that allow drawing each
                qubit in the given backend on a 2D grid.
            colorscale: The colorscale used to show the rates of this layer error.
            color_no_data: The color used for qubits and edges for which no data is available.
            edges_n_segs: The number of equal-sized segments that edges are made of.
            edges_width: The line width of the edges in pixels.
            height: The height of the returned figure.
            plot_bgcolor: The background color.
            radius: The radius of the pie charts representing the qubits.
            width: The width of the returned figure.

        Raises:
            ValueError: If the given coordinates are incompatible with the specified backend.
            ValueError: If ``backend`` has no coupling map.
        """
        fig = go.Figure(layout=go.Layout(width=width, height=height))

        if not coordinates:
            coordinates = get_qubits_coordinates(backend.num_qubits)
        if len(coordinates) != backend.num_qubits:
            raise ValueError("Given coordinates are incompatible with the specified backend.")
        # The coordinates come in the format ``(row, column)`` and place qubit ``0`` in the bottom row.
        # We turn them into ``(x, y)`` coordinates for convenience, multiplying the ``ys`` by ``-1`` so
        # that the map matches the map displayed on the ibmq website.
        ys = [-row for row, _ in coordinates]
        xs = [col for _, col in coordinates]

        if backend.coupling_map is None:
            raise ValueError("Given backend has no coupling map.")
        # A set of unique edges ``(i, j)``, with ``i < j``.
        edges = set(tuple(sorted(edge)) for edge in list(backend.coupling_map))

        # The highest rate, used to normalize all other rates before choosing their colors.
        high_scale = 0

        # Initialize a dictionary of one-qubit errors
        error_1q = self.error.n_body(1)
        rates_1q: Dict[int, Dict[str, float]] = {qubit: {} for qubit in self.qubits}
        for pauli, rate in zip(error_1q.generators, error_1q.rates):
            qubit = np.where(pauli.x | pauli.z)[0][0]
            rates_1q[qubit][str(pauli[qubit])] = rate
            high_scale = max(high_scale, rate)

        # Initialize a dictionary of two-qubit errors
        error_2q = self.error.n_body(2)
        rates_2q: Dict[Tuple[int, ...], Dict[str, float]] = {qubits: {} for qubits in edges}
        for pauli, rate in zip(error_2q.generators, error_2q.rates):
            qubits = tuple(sorted([i for i, q in enumerate(pauli) if str(q) != "I"]))
            rates_2q[qubits][str(pauli[[qubits[0], qubits[1]]])] = rate
            high_scale = max(high_scale, rate)

        # A discreet colorscale that contains 1000 hues.
        discreet_colorscale = sample_colorscale(colorscale, np.linspace(0, 1, 1000))

        # Plot the edges
        for q1, q2 in edges:
            x0 = xs[q1]
            x1 = xs[q2]
            y0 = ys[q1]
            y1 = ys[q2]

            if vals := rates_2q[(q1, q2)].values():
                # Add gradient. Gradients are currently not supported for go.Scatter lines, so we break
                # the line into segments and draw `edges_n_segs` segments of increasing colors.
                min_val = min(vals)
                max_val = min(max(vals), 1)
                all_vals = [
                    min_val + (max_val - min_val) / edges_n_segs * i for i in range(edges_n_segs)
                ]
                color = [
                    get_rgb_color(discreet_colorscale, v / high_scale, color_no_data) for v in all_vals
                ]
                hoverinfo_2q = ""
                for pauli, rate in rates_2q[(q1, q2)].items():
                    hoverinfo_2q += f"<br>{pauli}: {rate}"

                for i in range(edges_n_segs):
                    # Add a trace for the edge
                    edge = go.Scatter(
                        x=[x0 + (x1 - x0) / edges_n_segs * i, x0 + (x1 - x0) / edges_n_segs * (i + 1)],
                        y=[y0 + (y1 - y0) / edges_n_segs * i, y0 + (y1 - y0) / edges_n_segs * (i + 1)],
                        hovertemplate=hoverinfo_2q,
                        mode="lines",
                        line={
                            "color": color[i],
                            "width": edges_width,
                        },
                        showlegend=False,
                        name="",
                    )
                    fig.add_trace(edge)
            else:
                # Add a line for the edge
                edge = go.Scatter(
                    x=[x0, x1],
                    y=[y0, y1],
                    hovertemplate="No data",
                    mode="lines",
                    line={
                        "color": color_no_data,
                        "width": edges_width,
                    },
                    showlegend=False,
                    name="",
                )
                fig.add_trace(edge)

        # Plot the pie charts showing X, Y, and Z for each qubit
        shapes = []
        hoverinfo_1q = []  # the info displayed when hovering over the pie charts
        for qubit, (x, y) in enumerate(zip(xs, ys)):
            hoverinfo = ""
            for pauli, angle in [("Z", -30), ("X", 90), ("Y", 210)]:
                rate = rates_1q.get(qubit, {}).get(pauli, 0)
                fillcolor = get_rgb_color(discreet_colorscale, rate / high_scale, color_no_data)
                shapes += [
                    {
                        "type": "path",
                        "path": pie_slice(angle, angle + 120, x, y, radius),
                        "fillcolor": fillcolor,
                        "line_color": "black",
                        "line_width": 1,
                    },
                ]

                if rate:
                    hoverinfo += f"<br>{pauli}: {rate}"
            hoverinfo_1q += [hoverinfo or "No data"]

            # Add annotation with qubit label
            fig.add_annotation(x=x + 0.3, y=y + 0.4, text=f"{qubit}", showarrow=False)

        # Add the hoverinfo for the pie charts
        nodes = go.Scatter(
            x=xs,
            y=ys,
            mode="markers",
            marker={
                "color": list({qubit: max(rates_1q[qubit].values()) for qubit in rates_1q}.values()),
                "colorscale": colorscale,
                "showscale": True,
            },
            hovertemplate=hoverinfo_1q,
            showlegend=False,
            name="",
        )
        fig.add_trace(nodes)

        # Add a "legend" pie to show how pies work
        x_legend = max(xs) + 1
        y_legend = max(ys)
        for pauli, angle, slice_color in [
            ("Z", -30, "lightgreen"),
            ("X", 90, "dodgerblue"),
            ("Y", 210, "khaki"),
        ]:
            shapes += [
                {
                    "type": "path",
                    "path": pie_slice(angle, angle + 120, x_legend, y_legend, 0.5),
                    "fillcolor": slice_color,
                    "line_color": "black",
                    "line_width": 1,
                },
            ]
        fig.update_layout(shapes=shapes)

        # Add the annotations on top of the legend pie
        fig.add_annotation(x=x_legend + 0.2, y=y_legend, text="<b>Z</b>", showarrow=False, yshift=10)
        fig.add_annotation(x=x_legend - 0.2, y=y_legend, text="<b>X</b>", showarrow=False, yshift=10)
        fig.add_annotation(x=x_legend, y=y_legend - 0.45, text="<b>Y</b>", showarrow=False, yshift=10)

        # Set x and y range
        fig.update_xaxes(
            range=[min(xs) - 1, max(xs) + 2],
            showticklabels=False,
            showgrid=False,
            zeroline=False,
        )
        fig.update_yaxes(
            range=[min(ys) - 1, max(ys) + 1],
            showticklabels=False,
            showgrid=False,
            zeroline=False,
        )

        # Ensure that the circle is non-deformed
        fig.update_yaxes(scaleanchor="x", scaleratio=1)
        fig.update_layout(plot_bgcolor=plot_bgcolor)

        return fig


    def _json(self) -> dict:
        """Return a dictionary containing all the information to re-initialize this object."""
        return {"circuit": self.circuit, "qubits": self.qubits, "error": self.error}

    def __repr__(self) -> str:
        ret = f"circuit={repr(self.circuit)}, qubits={self.qubits}, error={self.error})"
        return f"LayerError({ret})"


class NoiseLearnerResult:
    """A container for the results of a noise learner experiment."""

    def __init__(self, data: Sequence[LayerError], metadata: dict[str, Any] | None = None):
        """
        Args:
            data: The data of a noise learner experiment.
            metadata: Metadata that is common to all pub results; metadata specific to particular
                pubs should be placed in their metadata fields. Keys are expected to be strings.
        """
        self._data = list(data)
        self._metadata = {} if metadata is None else metadata.copy()

    @property
    def data(self) -> list[LayerError]:
        """The data of this noise learner result."""
        return self._data

    @property
    def metadata(self) -> dict[str, Any]:
        """The metadata of this noise learner result."""
        return self._metadata

    def __getitem__(self, index: int) -> LayerError:
        return self.data[index]

    def __len__(self) -> int:
        return len(self.data)

    def __repr__(self) -> str:
        return f"NoiseLearnerResult(data={self.data}, metadata={self.metadata})"

    def __iter__(self) -> Iterator[LayerError]:
        return iter(self.data)
